{"version":3,"sources":["utils/convert.js","components/currencyConverter.js","App.js","index.js"],"names":["convert","baseAmount","baseCode","targetCode","rates","toUpperCase","CurrencyConverter","baseCur","targetCur","useState","setRates","codes","setCodes","amount","code","field1","setField1","field2","setField2","baseField","setBaseField","field1Input","useRef","field2Input","field1Code","field2Code","onChange","fieldNum","current","value","useEffect","Object","keys","length","console","log","targetAmount","prevState","fetchAndSetRates","fetch","endpoint","then","res","json","data","localStorage","setItem","JSON","stringify","catch","err","getItem","cachedRates","parse","timestamp","now","Date","cached","getDate","isExpired","rateObj","className","ref","type","onFocus","id","name","map","c","key","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b89bbc6e.chunk.js","sourcesContent":["// returns targetAmount\nexport const convert = (baseAmount, baseCode, targetCode, rates) => {\n\n  baseCode = baseCode.toUpperCase();\n  targetCode = targetCode.toUpperCase();\n\n  // get rate of baseCode, targetCode\n  const baseRate = rates[baseCode]\n  const targetRate = rates[targetCode]\n\n  // divide baseAmount by rate of baseCode\n  const francaAmount = baseAmount/baseRate\n\n  // multiple result by rate of targetCode\n  const result = francaAmount * targetRate\n\n  // return targetAmount\n  return result;\n}\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport { convert } from '../utils/convert'\n\nconst endpoint = 'https://openexchangerates.org/api/latest.json?app_id='\nconst apiId = '5eb4c18e936f4deeb6024f3d5dbab934'\n\nconst CurrencyConverter = ({ baseCur, targetCur }) => {\n  const [rates, setRates] = useState({})\n  const [codes, setCodes] = useState([])\n  const [field1, setField1] = useState({ amount: 0, code: 'USD' })\n  const [field2, setField2] = useState({ amount: 0, code: 'JPY' })\n  const [baseField, setBaseField] = useState(1)\n  const [baseRate, setBaseRate] = useState(1)\n  const [adjTargetRate, setAdjTargetRate] = useState(1)\n\n  const field1Input = useRef()\n  const field2Input = useRef()\n  const field1Code = useRef()\n  const field2Code = useRef()\n\n  const onChange = (fieldNum) => {\n    if(fieldNum===1) {\n      const amount = field1Input.current.value\n      const code = field1Code.current.value\n      setField1({\n        amount: amount,\n        code: code\n      })\n      // setBaseField(1)\n      }\n    else {\n      const amount = field2Input.current.value\n      const code = field2Code.current.value\n      setField2({\n          amount: amount,\n          code: code\n        })\n      // setBaseField(2)\n      }\n    }\n\n  useEffect(()=> {\n    // calc conversion and display in field 2\n    if(baseField === 1){\n      if(Object.keys(rates).length>0) {\n        console.log(rates)\n        const targetAmount = convert(field1.amount, field1.code, field2.code, rates.rates)\n        setField2(prevState=> ({ ...prevState, amount: targetAmount}))\n      }\n    }\n  },[field1])\n\n  useEffect(()=> {\n    // calc conversion and display in field 2\n    if(baseField === 2){\n      if(Object.keys(rates).length>0) {\n        console.log(rates)\n        const targetAmount = convert(field2.amount, field2.code, field1.code, rates.rates)\n        setField1(prevState=> ({ ...prevState, amount: targetAmount}))\n      }\n    }\n  },[field2])\n\n  // fetch rates from api, set to state and localstorage\n  const fetchAndSetRates = () => {\n    fetch(endpoint+apiId)\n      .then(res => res.json())\n      .then(data => {\n        localStorage.setItem('hmd-rates', JSON.stringify(data))\n        setRates(data)\n      })\n      .catch(err => console.log(err))\n    console.log('fetched new rates')\n  }\n\n  // returns true if cached timestamp date doesn not match today\n  const isExpired = (timestamp) => {\n    const now = new Date()\n    const cached = new Date(timestamp * 1000)\n    return now.getDate() !== cached.getDate()\n  }\n\n  useEffect(()=> {\n    // set cached rates if timestamp valid\n    if (localStorage.getItem('hmd-rates')) {\n      const cachedRates = JSON.parse(localStorage.getItem('hmd-rates'))\n      console.log('hmd-rates found in cache')\n      if(isExpired(cachedRates.timestamp)) {\n        fetchAndSetRates()\n      } else {\n        setRates(cachedRates)\n      }\n    } else {\n      // otherwise fetch new rates and set state\n      fetchAndSetRates()\n    }\n  },[])\n\n  useEffect(() => {\n    const rateObj = rates.rates\n    rateObj ? setCodes(Object.keys(rateObj)) : setCodes([])\n  }, [rates])\n\n  return (\n    <div className=\"currency-converter\">\n      <div className=\"input-section\">\n        <input\n          ref={field1Input}\n          type=\"number\"\n          onChange={()=>onChange(1)}\n          onFocus={()=> baseField === 1 ? null : setBaseField(1)}\n          className=\"input-amount\"\n          value={field1.amount}\n          id=\"input-1\"/>\n        <select\n          ref={field1Code}\n          name=\"code1\"\n          onChange={()=>onChange(1)}\n          onFocus={()=> baseField === 1 ? null : setBaseField(1)}\n          value={field1.code}\n          id=\"code1\"\n        >\n          {codes.map(c => (\n            <option key={c} value={c}>{c}</option>\n          ))}\n        </select>\n      </div>\n      <div className=\"input-section\">\n        <input\n          ref={field2Input}\n          type=\"number\"\n          onFocus={()=> baseField === 2 ? null : setBaseField(2)}\n          onChange={()=>onChange(2)}\n          className=\"input-amount\"\n          value={field2.amount}\n          id=\"input-2\"/>\n        <select\n          ref={field2Code}\n          name=\"code2\"\n          onFocus={()=> baseField === 2 ? null : setBaseField(2)}\n          onChange={()=>onChange(2)}\n          value={field2.code}\n          id=\"code2\">\n          {codes.map(c => (\n            <option key={c} value={c}>{c}</option>\n          ))}\n        </select>\n      </div>\n    </div>\n  )\n}\n\nexport default CurrencyConverter;\n","import React from 'react';\n\nimport CurrencyConverter from './components/currencyConverter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>How Much Dough?</h1>\n        <CurrencyConverter />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}