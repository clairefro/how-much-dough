{"version":3,"sources":["utils/convert.js","components/breadBox.js","components/currencyConverter.js","App.js","index.js","static/bread-outline.svg"],"names":["convert","baseAmount","baseCode","targetCode","rates","toUpperCase","toFixed","BreadBox","referenceField","useState","breads","setBreads","usd","setUsd","useEffect","code","usdAmount","amount","className","repeat","CurrencyConverter","baseCur","targetCur","setRates","codes","setCodes","field1","setField1","field2","setField2","baseField","setBaseField","field1Input","useRef","field2Input","field1Code","field2Code","onChange","fieldNum","current","value","Object","keys","length","console","log","targetAmount","prevState","fetchAndSetRates","fetch","endpoint","then","res","json","data","localStorage","setItem","JSON","stringify","catch","err","getItem","cachedRates","parse","timestamp","now","Date","cached","getDate","isExpired","rateObj","src","breadOutline","ref","type","onFocus","id","name","map","c","key","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.adaf7c87.chunk.js","sourcesContent":["// returns targetAmount\nexport const convert = (baseAmount, baseCode, targetCode, rates) => {\n\n  baseCode = baseCode.toUpperCase();\n  targetCode = targetCode.toUpperCase();\n\n  // get rate of baseCode, targetCode\n  const baseRate = rates[baseCode]\n  const targetRate = rates[targetCode]\n\n  // divide baseAmount by rate of baseCode\n  const francaAmount = baseAmount/baseRate\n\n  // multiple result by rate of targetCode\n  const result = francaAmount * targetRate\n\n  // return targetAmount\n  return result.toFixed(2);\n}\n","import React, { useState, useEffect } from 'react';\n\nimport {convert} from '../utils/convert'\n\nconst BreadBox = ({ referenceField, rates }) => {\n  const [breads, setBreads] = useState(0)\n  const [usd, setUsd] = useState(0)\n\n  useEffect(()=> {\n    if (referenceField.code !== 'USD') {\n      const usdAmount = convert(referenceField.amount, referenceField.code, 'USD', rates)\n      setUsd(usdAmount)\n    } else {\n      setUsd(referenceField.amount)\n    }\n\n  },[referenceField])\n\n  useEffect(()=> {\n    // 1 bread = 2.55 USD\n    setBreads(usd/2.55)\n  },[usd])\n\n  return (\n    <div className=\"bread-box\">\n    {breads > 0 &&\n      <h3>That's {breads.toFixed(2)} loafs of bread in the USA.</h3>\n    }\n    <div className=\"breads\">\n    {'🍞'.repeat(breads)}\n\n    </div>\n    </div>\n  );\n}\n\nexport default BreadBox;\n","import React, { useState, useEffect, useRef } from 'react';\nimport SVG from 'react-inlinesvg'\n\nimport { convert } from '../utils/convert'\n\nimport BreadBox from './breadBox'\nimport breadOutline from '../static/bread-outline.svg'\n\nconst endpoint = 'https://openexchangerates.org/api/latest.json?app_id='\nconst apiId = '5eb4c18e936f4deeb6024f3d5dbab934'\n\n\nconst CurrencyConverter = ({ baseCur, targetCur }) => {\n  const [rates, setRates] = useState({})\n  const [codes, setCodes] = useState([])\n  const [field1, setField1] = useState({ amount: 0, code: 'USD' })\n  const [field2, setField2] = useState({ amount: 0, code: 'JPY' })\n  const [baseField, setBaseField] = useState(1)\n  // const [baseRate, setBaseRate] = useState(1)\n  // const [adjTargetRate, setAdjTargetRate] = useState(1)\n\n  const field1Input = useRef()\n  const field2Input = useRef()\n  const field1Code = useRef()\n  const field2Code = useRef()\n\n  const onChange = (fieldNum) => {\n    if(fieldNum===1) {\n      const amount = field1Input.current.value\n      const code = field1Code.current.value\n      setField1({\n        amount: amount,\n        code: code\n      })\n      // setBaseField(1)\n      }\n    else {\n      const amount = field2Input.current.value\n      const code = field2Code.current.value\n      setField2({\n          amount: amount,\n          code: code\n        })\n      // setBaseField(2)\n      }\n    }\n\n  useEffect(()=> {\n    // calc conversion and display in field 2\n    if(baseField === 1){\n      if(Object.keys(rates).length>0) {\n        console.log(rates)\n        const targetAmount = convert(field1.amount, field1.code, field2.code, rates.rates)\n        setField2(prevState=> ({ ...prevState, amount: targetAmount}))\n      }\n    }\n  },[field1])\n\n  useEffect(()=> {\n    // calc conversion and display in field 2\n    if(baseField === 2){\n      if(Object.keys(rates).length>0) {\n        console.log(rates)\n        const targetAmount = convert(field2.amount, field2.code, field1.code, rates.rates)\n        setField1(prevState=> ({ ...prevState, amount: targetAmount}))\n      }\n    }\n  },[field2])\n\n  // fetch rates from api, set to state and localstorage\n  const fetchAndSetRates = () => {\n    fetch(endpoint+apiId)\n      .then(res => res.json())\n      .then(data => {\n        localStorage.setItem('hmd-rates', JSON.stringify(data))\n        setRates(data)\n      })\n      .catch(err => console.log(err))\n    console.log('fetched new rates')\n  }\n\n  // returns true if cached timestamp date doesn not match today\n  const isExpired = (timestamp) => {\n    const now = new Date()\n    const cached = new Date(timestamp * 1000)\n    return now.getDate() !== cached.getDate()\n  }\n\n  useEffect(()=> {\n    // set cached rates if timestamp valid\n    if (localStorage.getItem('hmd-rates')) {\n      const cachedRates = JSON.parse(localStorage.getItem('hmd-rates'))\n      console.log('hmd-rates found in cache')\n      if(isExpired(cachedRates.timestamp)) {\n        fetchAndSetRates()\n      } else {\n        setRates(cachedRates)\n      }\n    } else {\n      // otherwise fetch new rates and set state\n      fetchAndSetRates()\n    }\n  },[])\n\n  useEffect(() => {\n    const rateObj = rates.rates\n    rateObj ? setCodes(Object.keys(rateObj)) : setCodes([])\n  }, [rates])\n\n  return (\n    <div className=\"currency-converter\">\n    <SVG className=\"bread-outline\" src={breadOutline} />\n      <div className=\"top\">\n        <div className=\"input-section\">\n          <input\n            ref={field1Input}\n            type=\"number\"\n            onChange={()=>onChange(1)}\n            onFocus={()=> baseField === 1 ? null : setBaseField(1)}\n            className=\"input-amount\"\n            value={field1.amount}\n            id=\"input-1\"/>\n          <select\n            ref={field1Code}\n            name=\"code1\"\n            onChange={()=>onChange(1)}\n            onFocus={()=> baseField === 1 ? null : setBaseField(1)}\n            value={field1.code}\n            id=\"code1\"\n          >\n            {codes.map(c => (\n              <option key={c} value={c}>{c}</option>\n            ))}\n          </select>\n        </div>\n        <div className=\"input-section\">\n          <input\n            ref={field2Input}\n            type=\"number\"\n            onFocus={()=> baseField === 2 ? null : setBaseField(2)}\n            onChange={()=>onChange(2)}\n            className=\"input-amount\"\n            value={field2.amount}\n            id=\"input-2\"/>\n          <select\n            ref={field2Code}\n            name=\"code2\"\n            onFocus={()=> baseField === 2 ? null : setBaseField(2)}\n            onChange={()=>onChange(2)}\n            value={field2.code}\n            id=\"code2\">\n            {codes.map(c => (\n              <option key={c} value={c}>{c}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n      {field1.amount > 0 && (\n        <div className=\"bottom\">\n          <BreadBox referenceField={field1} rates={rates.rates} />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default CurrencyConverter;\n","import React from 'react';\n\nimport CurrencyConverter from './components/currencyConverter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>How Much Dough?</h1>\n        <CurrencyConverter />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/bread-outline.8e82d674.svg\";"],"sourceRoot":""}